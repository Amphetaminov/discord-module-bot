import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('stats')
        .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /ping'),

    async execute(interaction) {
        this.logger.info(`–ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        const totalPings = this.database.prepare('SELECT COUNT(*) as count FROM ping_logs').get();
        const userPings = this.database.prepare('SELECT COUNT(*) as count FROM ping_logs WHERE user_id = ?').get(interaction.user.id);
        const avgLatency = this.database.prepare('SELECT AVG(latency) as avg FROM ping_logs').get();
        const lastPings = this.database.prepare('SELECT username, latency, timestamp FROM ping_logs ORDER BY timestamp DESC LIMIT 5').all();

        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping')
            .addFields(
                { name: 'üåç –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', value: `${totalPings.count}`, inline: true },
                { name: 'üë§ –í–∞—à–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', value: `${userPings.count}`, inline: true },
                { name: '‚ö° –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞', value: `${Math.round(avgLatency.avg)}–º—Å`, inline: true }
            )
            .setFooter({ text: `–ú–æ–¥—É–ª—å: ${this.module}` })
            .setTimestamp();

        if (lastPings.length > 0) {
            const lastPingsText = lastPings.map(log => {
                const date = new Date(log.timestamp);
                return `\`${log.username}\` - ${log.latency}–º—Å (${date.toLocaleString('ru-RU')})`;
            }).join('\n');

            embed.addFields({ 
                name: 'üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', 
                value: lastPingsText 
            });
        }

        await interaction.reply({ embeds: [embed], ephemeral: true });
    }
};

