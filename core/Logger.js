import chalk from 'chalk';
import config from '../config.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ –∏ –º–æ–¥—É–ª–µ–π
 */
class Logger {
    constructor(moduleName = 'CORE') {
        this.moduleName = moduleName;
        this.config = config.logging;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp
     */
    getTimestamp() {
        if (!this.config.timestamp) return '';
        
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        
        return chalk.gray(`[${hours}:${minutes}:${seconds}]`);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –º–æ–¥—É–ª—è
     */
    getModuleName() {
        return chalk.cyan(`[${this.moduleName}]`);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    log(level, message, ...args) {
        const levels = {
            debug: { priority: 0, color: chalk.gray, prefix: 'üîç' },
            info: { priority: 1, color: chalk.blue, prefix: '‚ÑπÔ∏è' },
            success: { priority: 1, color: chalk.green, prefix: '‚úÖ' },
            warn: { priority: 2, color: chalk.yellow, prefix: '‚ö†Ô∏è' },
            error: { priority: 3, color: chalk.red, prefix: '‚ùå' }
        };

        const currentLevel = levels[this.config.level] || levels.info;
        const logLevel = levels[level] || levels.info;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if (logLevel.priority < currentLevel.priority) return;

        const timestamp = this.getTimestamp();
        const moduleName = this.getModuleName();
        const prefix = logLevel.prefix;
        const coloredMessage = this.config.colors 
            ? logLevel.color(message) 
            : message;

        console.log(timestamp, moduleName, prefix, coloredMessage, ...args);
    }

    /**
     * Debug –ª–æ–≥–∏
     */
    debug(message, ...args) {
        this.log('debug', message, ...args);
    }

    /**
     * Info –ª–æ–≥–∏
     */
    info(message, ...args) {
        this.log('info', message, ...args);
    }

    /**
     * Success –ª–æ–≥–∏
     */
    success(message, ...args) {
        this.log('success', message, ...args);
    }

    /**
     * Warning –ª–æ–≥–∏
     */
    warn(message, ...args) {
        this.log('warn', message, ...args);
    }

    /**
     * Error –ª–æ–≥–∏
     */
    error(message, ...args) {
        this.log('error', message, ...args);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å stack trace
     */
    errorStack(error, context = '') {
        if (context) {
            this.error(`${context}:`);
        }
        this.error(error.message);
        if (error.stack) {
            console.error(chalk.red(error.stack));
        }
    }
}

export default Logger;

